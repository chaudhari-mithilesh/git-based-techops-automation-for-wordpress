name: Local WordPress Clone

on:
  workflow_dispatch:
    inputs:
      sourceUrl:
        description: 'Source WordPress URL (local or remote)'
        required: true
        type: string
        default: 'http://localhost:8080'
      targetBranch:
        description: 'Target Branch'
        required: true
        type: string
        default: 'main'

env:
  TARGET_REPO: 'chaudhari-mithilesh/demo-wordpress-site-for-techops'

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate source URL
        run: |
          if ! curl --output /dev/null --silent --head --fail "${{ github.event.inputs.sourceUrl }}"; then
            echo "::error::Source URL is not accessible: ${{ github.event.inputs.sourceUrl }}"
            exit 1
          fi

      - name: Validate target repository
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.repos.get({
                owner: 'chaudhari-mithilesh',
                repo: 'demo-wordpress-site-for-techops'
              });
            } catch (error) {
              core.setFailed(`Target repository validation failed: ${error.message}`);
            }

  clone-to-git:
    needs: validate-inputs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: chaudhari-mithilesh/demo-wordpress-site-for-techops
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.targetBranch }}

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mysql, curl, json, dom, simplexml, zip

      - name: Install WP-CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

      - name: Clone WordPress Files
        id: clone
        env:
          SOURCE_URL: ${{ github.event.inputs.sourceUrl }}
        run: |
          # Create temporary directory
          mkdir -p temp_wp
          cd temp_wp
          
          # Download WordPress core
          echo "Downloading WordPress core..."
          wp core download --allow-root || {
            echo "::error::Failed to download WordPress core"
            exit 1
          }
          
          # Download plugins and themes
          echo "Downloading plugins and themes from $SOURCE_URL"
          
          # Download plugins
          PLUGINS=$(curl -s "$SOURCE_URL/wp-json/wp/v2/plugins" || echo "")
          if [ ! -z "$PLUGINS" ]; then
            mkdir -p wp-content/plugins
            echo "$PLUGINS" | jq -r '.[] | .download_url' | while read url; do
              if [ ! -z "$url" ]; then
                echo "Downloading plugin from: $url"
                wget -q "$url" -P wp-content/plugins/ || echo "Warning: Failed to download plugin from $url"
              fi
            done
          else
            echo "::warning::Could not fetch plugins list from source site"
          fi
          
          # Download themes
          THEMES=$(curl -s "$SOURCE_URL/wp-json/wp/v2/themes" || echo "")
          if [ ! -z "$THEMES" ]; then
            mkdir -p wp-content/themes
            echo "$THEMES" | jq -r '.[] | .download_url' | while read url; do
              if [ ! -z "$url" ]; then
                echo "Downloading theme from: $url"
                wget -q "$url" -P wp-content/themes/ || echo "Warning: Failed to download theme from $url"
              fi
            done
          else
            echo "::warning::Could not fetch themes list from source site"
          fi
          
          # Create wp-config.php template
          cat > wp-config.php << EOL
          <?php
          define('DB_NAME', 'wordpress');
          define('DB_USER', 'wordpress');
          define('DB_PASSWORD', 'wordpress');
          define('DB_HOST', 'db');
          define('DB_CHARSET', 'utf8');
          define('DB_COLLATE', '');
          
          \$table_prefix = 'wp_';
          
          define('WP_DEBUG', false);
          define('WP_DEBUG_LOG', false);
          define('WP_DEBUG_DISPLAY', false);
          
          if (!defined('ABSPATH')) {
              define('ABSPATH', __DIR__ . '/');
          }
          
          require_once ABSPATH . 'wp-settings.php';
          EOL
          
          # Copy files to git repo root
          echo "Copying files to repository..."
          cp -r * ../
          cd ..
          rm -rf temp_wp
          
          echo "::set-output name=clone_status::success"

      - name: Configure Git
        if: steps.clone.outputs.clone_status == 'success'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit Changes
        if: steps.clone.outputs.clone_status == 'success'
        run: |
          # Stage all changes
          git add .
          
          # Commit changes (don't fail if nothing to commit)
          git commit -m "feat: Clone WordPress site from ${{ github.event.inputs.sourceUrl }}" || echo "No changes to commit"
          
          # Try to push changes
          if ! git push origin ${{ github.event.inputs.targetBranch }}; then
            echo "::error::Failed to push changes to branch ${{ github.event.inputs.targetBranch }}"
            exit 1
          fi

      - name: Create Pull Request
        if: success()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: Clone WordPress site"
          title: "Clone WordPress site from ${{ github.event.inputs.sourceUrl }}"
          body: |
            Automated WordPress site clone to Git repository.
            
            Source: ${{ github.event.inputs.sourceUrl }}
            Target Branch: ${{ github.event.inputs.targetBranch }}
            
            Changes made:
            - Downloaded WordPress core files
            - Downloaded plugins from source site
            - Downloaded themes from source site
            - Created wp-config.php template
            
            Please review the changes before merging.
          branch: clone/${{ github.event.inputs.targetBranch }}
          base: ${{ github.event.inputs.targetBranch }}
          delete-branch: true

      - name: Handle Failure
        if: failure()
        run: |
          echo "::error::WordPress site clone failed. Please check the logs for details."
          exit 1 